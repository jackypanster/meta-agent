"""
Â∫îÁî®Á®ãÂ∫èÊ†∏ÂøÉÊ®°Âùó

‰∏ªË¶ÅÁöÑÂØπËØùÂæ™ÁéØÂíåAgentÁÆ°ÁêÜÈÄªËæë
"""

import time
from typing import Dict, List, Any, NoReturn

from qwen_agent.agents import Assistant
from qwen_agent.utils.output_beautify import typewriter_print

from src.config.settings import get_config
from src.tools.qwen_tools.memory_tools import get_memory_store
from src.llm_config import create_llm_config, get_model_display_name
from src.agent_setup import create_tools_list
from src.ui import show_welcome, show_help, show_memory, clear_screen


def create_agent() -> Assistant:
    """ÂàõÂª∫Âπ∂ÈÖçÁΩÆAgent
    
    Returns:
        ÈÖçÁΩÆÂ•ΩÁöÑAssistantÂÆû‰æã
        
    Raises:
        ÂêÑÁßçÈÖçÁΩÆÈîôËØØ: ÈÖçÁΩÆÂ§±Ë¥•Êó∂Á´ãÂç≥ÊäõÂá∫
    """
    # ÂàõÂª∫LLMÈÖçÁΩÆ
    print("\nüîß Ê≠£Âú®ÂàùÂßãÂåñAIÊ®°Âûã...")
    
    llm_cfg = create_llm_config()
    
    # ËÆæÁΩÆÂ∑•ÂÖ∑
    print("\nüì° Ê≠£Âú®Âä†ËΩΩMCPÊúçÂä°Âô®ÈÖçÁΩÆ...")
    
    tools = create_tools_list()
    
    # ‰ΩøÁî®Á©∫Á≥ªÁªüÊèêÁ§∫ËØçÔºåÂÆåÂÖ®‰æùËµñqwen-agentÊ°ÜÊû∂ÂÜÖÁΩÆÊåá‰ª§
    system_message = ""
    
    # ÂàõÂª∫Agent - ‰ΩøÁî®ÁÆÄÂçïÈÖçÁΩÆ
    agent = Assistant(
        llm=llm_cfg,
        system_message=system_message,
        function_list=tools,
        name="AIÂä©Êâã",
        description="Âü∫‰∫éqwen-agentÊ°ÜÊû∂ÁöÑÊô∫ËÉΩÂä©Êâã"
    )
    
    print("‚úì AIÂä©ÊâãÂàùÂßãÂåñÊàêÂäüÔºÅ")
    
    return agent


def run_conversation_loop(agent: Assistant) -> NoReturn:
    """ËøêË°å‰∏ªË¶ÅÁöÑÂØπËØùÂæ™ÁéØ
    
    Args:
        agent: ÈÖçÁΩÆÂ•ΩÁöÑAssistantÂÆû‰æã
        
    Raises:
        ‰ªª‰ΩïÂºÇÂ∏∏ÈÉΩ‰ºöÁ´ãÂç≥‰º†Êí≠ÂØºËá¥Á®ãÂ∫èÂ¥©Ê∫É
    """
    messages = []
    memory_store = get_memory_store()
    model_display = get_model_display_name()
    
    print(f"\n‚ú® ÂºÄÂßãÂØπËØùÂêßÔºÅ(‰ΩøÁî®{model_display})\n")
    
    while True:
        # Ëé∑ÂèñÁî®Êà∑ËæìÂÖ• - Âè™Â§ÑÁêÜÁî®Êà∑‰∏≠Êñ≠
        user_input = input("ÊÇ®: ").strip()
        
        # Â§ÑÁêÜÁâπÊÆäÂëΩ‰ª§
        if user_input.lower() in ['quit', 'exit', 'q', 'ÈÄÄÂá∫']:
            print("üëã ÂÜçËßÅÔºÅ")
            break
        elif user_input.lower() in ['help', 'h', 'Â∏ÆÂä©']:
            show_help()
            continue
        elif user_input.lower() in ['clear', 'cls', 'Ê∏ÖÂ±è']:
            clear_screen()
            continue
        elif user_input.lower() in ['memory', 'mem', 'ËÆ∞ÂøÜ']:
            show_memory()
            continue
        elif not user_input:
            continue
        
        # Ê∑ªÂä†Áî®Êà∑Ê∂àÊÅØÂà∞ÂéÜÂè≤
        messages.append({'role': 'user', 'content': user_input})
        
        # ÊòæÁ§∫AIÂõûÂ§ç
        print(f"\nü§ñ Âä©Êâã: ", end='', flush=True)
        
        # Ë∞ÉÁî®AgentÂπ∂ÊµÅÂºèÊòæÁ§∫
        # Ê≥®ÊÑè: ‰ªª‰ΩïÊù•Ëá™ agent.run() ÁöÑÂºÇÂ∏∏ÈÉΩÊ≤°ÊúâË¢´ÊçïËé∑Ôºå
        # ËøôÊòØ‰∏∫‰∫ÜÁ°Æ‰øùÂΩìÂâç‰∫§‰∫íËΩÆÊ¨°ÁöÑ fail-fast Ë°å‰∏∫„ÄÇ
        response_text = ""
        response_messages = agent.run(messages=messages)
        
        for response in response_messages:
            response_text = typewriter_print(response, response_text)
        
        # Ê∏ÖÁêÜÂπ∂Ê∑ªÂä†ÂìçÂ∫îÂà∞ÂéÜÂè≤ - ÁâπÂà´Â§ÑÁêÜR1Ê®°ÂûãÁöÑreasoning_content
        clean_messages = []
        for msg in response_messages:
            if isinstance(msg, dict):
                # ÂàõÂª∫Ê∏ÖÁêÜÂêéÁöÑÊ∂àÊÅØÂâØÊú¨ÔºåÁßªÈô§reasoning_content
                clean_msg = {k: v for k, v in msg.items() if k != 'reasoning_content'}
                clean_messages.append(clean_msg)
            else:
                clean_messages.append(msg)
        
        messages.extend(clean_messages)
        
        # ‰øùÂ≠òÂØπËØùÂà∞ÁÆÄÂçïÂéÜÂè≤ËÆ∞ÂΩï
        memory_store['history'].append({
            'user': user_input,
            'assistant': response_text,
            'timestamp': time.time()
        })
        
        # ‰øùÊåÅÂéÜÂè≤ËÆ∞ÂΩï‰∏çË∂ÖËøá50Êù°
        if len(memory_store['history']) > 50:
            memory_store['history'] = memory_store['history'][-50:]
        
        print()  # Êç¢Ë°å