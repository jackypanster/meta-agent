---
description:
globs:
alwaysApply: false
---
# Qwen-Agent MVP 开发规则

## **文件大小和结构限制**

- **100行限制**: 每个Python文件不得超过100行（包括注释和空行）
- **单一职责**: 每个模块、类、函数只负责一个明确的功能
- **模块分离**: 复杂功能必须拆分为多个小模块
- **导入管理**: 每个文件的导入语句不超过10行

```python
# ✅ DO: 小而专注的模块
# src/config/env_loader.py (< 100 lines)
class EnvironmentLoader:
    """专门负责环境变量加载"""
    def load_config(self) -> Dict[str, str]: ...

# src/config/validator.py (< 100 lines)  
class ConfigValidator:
    """专门负责配置验证"""
    def validate_api_keys(self, config: Dict) -> bool: ...

# ❌ DON'T: 超大文件包含多个职责
# src/config.py (300+ lines) - 包含加载、验证、缓存等多种功能
```

## **测试驱动开发 (TDD)**

- **测试覆盖率**: 所有功能性代码必须有对应测试，目标覆盖率 ≥ 90%
- **测试文件命名**: `test_{module_name}.py` 对应 `{module_name}.py`
- **测试组织**: 每个测试文件也不超过100行，复杂测试拆分多个文件
- **异步测试**: 异步函数使用 `pytest-asyncio` 进行测试

```python
# ✅ DO: 完整的测试覆盖
# tests/config/test_env_loader.py
import pytest
from src.config.env_loader import EnvironmentLoader

class TestEnvironmentLoader:
    def test_load_valid_config(self):
        """测试有效配置加载"""
        ...
    
    def test_missing_required_key_raises_error(self):
        """测试缺少必需配置时抛出错误"""
        ...
    
    @pytest.mark.asyncio
    async def test_async_config_validation(self):
        """测试异步配置验证"""
        ...

# ❌ DON'T: 没有测试的功能代码
# src/agent/core.py - 复杂业务逻辑但无测试
```

## **代码组织和架构原则**

### **模块分层架构**
```
src/
├── config/          # 配置管理 (单一职责模块)
│   ├── env_loader.py      # 环境变量加载 (< 100行)
│   ├── validator.py       # 配置验证 (< 100行)
│   └── settings.py        # 设置数据类 (< 100行)
├── agent/           # AI智能体核心
│   ├── client.py          # Qwen-Agent客户端 (< 100行)
│   ├── processor.py       # 消息处理器 (< 100行)
│   └── formatter.py       # 响应格式化 (< 100行)
├── tools/           # MCP工具集成
│   ├── mcp_client.py      # MCP客户端 (< 100行)
│   ├── event_handler.py   # 事件处理 (< 100行)
│   └── stream_reader.py   # 流数据读取 (< 100行)
├── memory/          # 记忆管理
│   ├── manager.py         # 内存管理器 (< 100行)
│   ├── storage.py         # 存储接口 (< 100行)
│   └── retriever.py       # 信息检索 (< 100行)
└── cli/             # 命令行界面
    ├── interface.py       # 主界面 (< 100行)
    ├── commands.py        # 命令处理 (< 100行)
    └── display.py         # 显示逻辑 (< 100行)
```

### **类和函数设计**
- **类职责**: 每个类只处理一种类型的对象或操作
- **函数长度**: 函数不超过20行，复杂逻辑拆分为多个函数
- **参数限制**: 函数参数不超过5个，使用数据类或配置对象

```python
# ✅ DO: 小而专注的函数
async def load_environment_config() -> Dict[str, str]:
    """加载环境配置 - 单一职责，< 20行"""
    ...

async def validate_api_credentials(config: Dict[str, str]) -> bool:
    """验证API凭据 - 独立功能，< 20行"""
    ...

# ❌ DON'T: 过长的函数包含多个职责
async def setup_complete_application():  # 50+ lines
    # 加载配置 + 验证 + 初始化 + 启动 - 太多职责
```

## **异步编程规范**

- **异步优先**: HTTP请求、文件IO、数据库操作必须使用异步
- **异步传播**: 调用异步函数的函数也必须是异步的
- **错误处理**: 每个异步操作都要有适当的异常处理
- **资源管理**: 使用 `async with` 管理连接和资源

```python
# ✅ DO: 正确的异步模式
import asyncio
import aiohttp
from contextlib import asynccontextmanager

class DeepSeekClient:
    async def make_request(self, prompt: str) -> str:
        """异步API请求"""
        async with aiohttp.ClientSession() as session:
            try:
                async with session.post(
                    self.api_url, 
                    json={"prompt": prompt}
                ) as response:
                    return await response.text()
            except aiohttp.ClientError as e:
                raise APIError(f"DeepSeek API错误: {e}")

# ❌ DON'T: 混用同步和异步
class BadClient:
    async def make_request(self, prompt: str) -> str:
        response = requests.post(...)  # 阻塞调用在异步函数中
```

## **类型提示和数据验证**

- **完整类型注解**: 所有函数参数、返回值、类属性都要有类型提示
- **Pydantic模型**: 复杂数据结构使用Pydantic进行验证
- **泛型使用**: 适当使用`TypeVar`、`Generic`等高级类型

```python
# ✅ DO: 完整的类型提示
from typing import Dict, List, Optional, Protocol
from pydantic import BaseModel, Field

class ConfigModel(BaseModel):
    """配置数据模型"""
    api_key: str = Field(..., min_length=10)
    base_url: str = Field(default="https://api.deepseek.com")
    timeout: int = Field(default=30, gt=0)

async def process_message(
    message: str,
    config: ConfigModel,
    history: Optional[List[Dict[str, str]]] = None
) -> Dict[str, str]:
    """处理消息并返回响应"""
    ...

# ❌ DON'T: 缺少类型提示
def process_message(message, config, history=None):  # 无类型信息
```

## **错误处理和日志规范**

- **自定义异常**: 为不同错误类型创建专门的异常类
- **结构化日志**: 使用结构化日志记录关键操作
- **优雅降级**: API失败时提供合理的降级处理
- **错误边界**: 每个模块都要有明确的错误边界

```python
# ✅ DO: 结构化错误处理
import logging
from typing import Dict, Any

class QwenAgentError(Exception):
    """基础异常类"""
    pass

class APIConnectionError(QwenAgentError):
    """API连接错误"""
    pass

class ConfigurationError(QwenAgentError):
    """配置错误"""
    pass

logger = logging.getLogger(__name__)

async def call_deepseek_api(prompt: str) -> Dict[str, Any]:
    """调用DeepSeek API"""
    try:
        response = await client.post(prompt)
        logger.info("API调用成功", extra={"prompt_length": len(prompt)})
        return response
    except aiohttp.ClientError as e:
        logger.error("API连接失败", extra={"error": str(e)})
        raise APIConnectionError(f"无法连接到DeepSeek API: {e}")
```

## **测试策略和质量保证**

### **测试分类**
- **单元测试**: 测试单个函数/方法，使用mock隔离依赖
- **集成测试**: 测试模块间交互，如API调用、数据流
- **端到端测试**: 测试完整用户场景

```python
# ✅ DO: 分层测试策略

# tests/unit/test_config_validator.py - 单元测试
import pytest
from unittest.mock import Mock, patch
from src.config.validator import ConfigValidator

class TestConfigValidator:
    def test_validate_api_key_format(self):
        """测试API密钥格式验证"""
        validator = ConfigValidator()
        assert validator.validate_api_key("sk-1234567890") is True
        assert validator.validate_api_key("invalid") is False

# tests/integration/test_deepseek_integration.py - 集成测试
@pytest.mark.asyncio
async def test_deepseek_api_integration():
    """测试DeepSeek API集成"""
    client = DeepSeekClient(api_key="test-key")
    with patch('aiohttp.ClientSession.post') as mock_post:
        mock_post.return_value.__aenter__.return_value.text.return_value = "response"
        result = await client.make_request("test prompt")
        assert result == "response"

# tests/e2e/test_full_conversation.py - 端到端测试
@pytest.mark.asyncio
async def test_complete_conversation_flow():
    """测试完整对话流程"""
    # 模拟用户输入 -> AI处理 -> 记忆存储 -> 响应输出
    ...
```

### **测试工具和配置**
```python
# pytest.ini
[tool:pytest]
asyncio_mode = auto
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
markers =
    unit: 单元测试
    integration: 集成测试
    e2e: 端到端测试
    slow: 慢速测试

# pyproject.toml - 测试覆盖率配置
[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "src/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError"
]
```

## **性能和资源管理**

- **连接池**: HTTP客户端使用连接池
- **资源清理**: 确保文件、网络连接等资源正确释放
- **批量处理**: 避免在循环中进行网络请求
- **缓存策略**: 适当使用缓存减少重复计算

```python
# ✅ DO: 高效的资源管理
class EfficientAPIClient:
    def __init__(self):
        self._session: Optional[aiohttp.ClientSession] = None
    
    async def __aenter__(self):
        self._session = aiohttp.ClientSession(
            connector=aiohttp.TCPConnector(limit=100)
        )
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self._session:
            await self._session.close()

# 使用示例
async def process_multiple_requests(prompts: List[str]) -> List[str]:
    async with EfficientAPIClient() as client:
        tasks = [client.make_request(prompt) for prompt in prompts]
        return await asyncio.gather(*tasks)
```

## **开发工具配置**

### **代码质量工具**
```bash
# 代码格式化
uv run black src/ tests/
uv run isort src/ tests/

# 类型检查
uv run mypy src/

# 代码检查
uv run flake8 src/ tests/

# 测试运行
uv run pytest --cov=src --cov-report=html
```

### **Git提交规范**
- 使用传统提交格式: `type(scope): description`
- 每次提交前运行测试: `uv run pytest`
- 提交前运行代码检查: `uv run black . && uv run isort . && uv run mypy src/`

## **文档和注释规范**

- **函数文档**: 使用Google风格的docstring
- **类型文档**: 复杂类型在注释中说明
- **模块文档**: 每个模块开头说明其职责和用法
- **API文档**: 使用Sphinx自动生成API文档

```python
# ✅ DO: 完整的文档示例
async def process_conversation_turn(
    user_message: str,
    conversation_history: List[ConversationTurn],
    config: AgentConfig
) -> ConversationResponse:
    """处理一轮对话交互。
    
    Args:
        user_message: 用户输入的消息文本
        conversation_history: 历史对话记录列表
        config: 智能体配置对象
    
    Returns:
        包含AI响应和元数据的响应对象
    
    Raises:
        APIConnectionError: 当无法连接到LLM API时
        ValidationError: 当输入参数格式错误时
    
    Example:
        >>> config = AgentConfig(api_key="sk-xxx")
        >>> history = []
        >>> response = await process_conversation_turn(
        ...     "你好", history, config
        ... )
        >>> print(response.message)
        "你好！我是AI助手..."
    """
    ...
```

---

遵循这些规则将确保Qwen-Agent MVP项目具有高质量、可维护、可测试的代码库。每个开发者都应该在编写代码时参考这些最佳实践。
