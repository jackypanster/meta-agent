{
  "audit_timestamp": "2025-06-16T19:58:22.762543",
  "project_root": "/Users/zhibinpan/workspace/meta-agent",
  "summary": {
    "total_exception_handlers": 30,
    "total_fallback_patterns": 4,
    "files_with_exceptions": 7,
    "files_with_fallbacks": 4
  },
  "exception_handlers": [
    {
      "file_path": "/Users/zhibinpan/workspace/meta-agent/tests/test_fail_fast_validation.py",
      "line_number": 47,
      "column": 12,
      "handler_type": "try-finally",
      "exception_types": [],
      "has_bare_except": false,
      "has_finally": true,
      "code_snippet": "try:\n                with pytest.raises(ConfigError) as exc_info:\n                    Config(f.name)\n                \n                assert \"格式错误\" in str(exc_info.value)\n            finally:\n                os.unlink(f.name)",
      "function_name": "test_malformed_env_file_fails_immediately",
      "class_name": "TestConfigurationFailFast"
    },
    {
      "file_path": "/Users/zhibinpan/workspace/meta-agent/tests/test_fail_fast_validation.py",
      "line_number": 61,
      "column": 12,
      "handler_type": "try-finally",
      "exception_types": [],
      "has_bare_except": false,
      "has_finally": true,
      "code_snippet": "try:\n                config = Config(f.name)\n                \n                # 测试get方法对不存在的键立即失败\n                with pytest.raises(ConfigError) as exc_info:\n                    config.get('NONEXISTENT_KEY')\n                assert \"不存在\" in str(exc_info.value)\n                \n                # 测试require方法对不存在的键立即失败\n                with pytest.raises(ConfigError) as exc_info:\n                    config.require('MISSING_REQUIRED_KEY')\n                assert \"缺少必需的配置\" in str(exc_info.value)\n                \n            finally:\n                os.unlink(f.name)",
      "function_name": "test_missing_required_config_fails_immediately",
      "class_name": "TestConfigurationFailFast"
    },
    {
      "file_path": "/Users/zhibinpan/workspace/meta-agent/tests/test_fail_fast_validation.py",
      "line_number": 83,
      "column": 12,
      "handler_type": "try-finally",
      "exception_types": [],
      "has_bare_except": false,
      "has_finally": true,
      "code_snippet": "try:\n                config = Config(f.name)\n                \n                with pytest.raises(ConfigError) as exc_info:\n                    config.get_bool('NONEXISTENT_BOOL_KEY')\n                assert \"不存在\" in str(exc_info.value)\n                \n            finally:\n                os.unlink(f.name)",
      "function_name": "test_get_bool_missing_key_fails_immediately",
      "class_name": "TestConfigurationFailFast"
    },
    {
      "file_path": "/Users/zhibinpan/workspace/meta-agent/tests/test_fail_fast_validation.py",
      "line_number": 120,
      "column": 12,
      "handler_type": "try-finally",
      "exception_types": [],
      "has_bare_except": false,
      "has_finally": true,
      "code_snippet": "try:\n                # 使用不存在的schema文件\n                loader = MCPConfigLoader(config_f.name, \"nonexistent_schema.json\")\n                \n                # 尝试加载配置应该在schema验证时失败\n                with pytest.raises(MCPConfigError) as exc_info:\n                    loader.load_config()\n                \n                assert \"JSON Schema文件不存在\" in str(exc_info.value)\n                \n            finally:\n                os.unlink(config_f.name)",
      "function_name": "test_missing_schema_file_fails_immediately",
      "class_name": "TestMCPConfigurationFailFast"
    },
    {
      "file_path": "/Users/zhibinpan/workspace/meta-agent/tests/test_fail_fast_validation.py",
      "line_number": 139,
      "column": 12,
      "handler_type": "try-finally",
      "exception_types": [],
      "has_bare_except": false,
      "has_finally": true,
      "code_snippet": "try:\n                loader = MCPConfigLoader(f.name, \"nonexistent_schema.json\")\n                \n                with pytest.raises(json.JSONDecodeError):\n                    loader.load_config()\n                    \n            finally:\n                os.unlink(f.name)",
      "function_name": "test_invalid_json_config_fails_immediately",
      "class_name": "TestMCPConfigurationFailFast"
    },
    {
      "file_path": "/Users/zhibinpan/workspace/meta-agent/tests/test_fail_fast_validation.py",
      "line_number": 291,
      "column": 12,
      "handler_type": "try-finally",
      "exception_types": [],
      "has_bare_except": false,
      "has_finally": true,
      "code_snippet": "try:\n                config = Config(f.name)\n                \n                # 确保get方法对不存在的键抛出异常，而不是返回默认值\n                with pytest.raises(ConfigError):\n                    config.get('NONEXISTENT_KEY')\n                \n                # 确保require方法对不存在的键抛出异常\n                with pytest.raises(ConfigError):\n                    config.require('NONEXISTENT_KEY')\n                \n                # 确保get_bool方法对不存在的键抛出异常\n                with pytest.raises(ConfigError):\n                    config.get_bool('NONEXISTENT_KEY')\n                    \n            finally:\n                os.unlink(f.name)",
      "function_name": "test_no_default_values_in_config_get",
      "class_name": "TestNoFallbackMechanisms"
    },
    {
      "file_path": "/Users/zhibinpan/workspace/meta-agent/tests/test_prompt_config_validation.py",
      "line_number": 65,
      "column": 8,
      "handler_type": "try-except",
      "exception_types": [
        "ValidationError"
      ],
      "has_bare_except": false,
      "has_finally": false,
      "code_snippet": "try:\n            validate(instance=config_data, schema=self.schema)\n        except ValidationError as e:\n            pytest.fail(f\"主配置文件验证失败: {e.message}\")",
      "function_name": "test_main_config_validation",
      "class_name": "TestPromptConfigValidation"
    },
    {
      "file_path": "/Users/zhibinpan/workspace/meta-agent/tests/test_prompt_config_validation.py",
      "line_number": 84,
      "column": 12,
      "handler_type": "try-except",
      "exception_types": [
        "ValidationError"
      ],
      "has_bare_except": false,
      "has_finally": false,
      "code_snippet": "try:\n                validate(instance=template_data, schema=self.schema)\n            except ValidationError as e:\n                pytest.fail(f\"模板文件 {template_file} 验证失败: {e.message}\")",
      "function_name": "test_template_files_validation",
      "class_name": "TestPromptConfigValidation"
    },
    {
      "file_path": "/Users/zhibinpan/workspace/meta-agent/tests/test_prompt_config_validation.py",
      "line_number": 102,
      "column": 12,
      "handler_type": "try-except",
      "exception_types": [
        "ValidationError"
      ],
      "has_bare_except": false,
      "has_finally": false,
      "code_snippet": "try:\n                validate(instance=locale_data, schema=self.schema)\n            except ValidationError as e:\n                pytest.fail(f\"多语言文件 {locale}/{filename} 验证失败: {e.message}\")",
      "function_name": "test_locale_files_validation",
      "class_name": "TestPromptConfigValidation"
    },
    {
      "file_path": "/Users/zhibinpan/workspace/meta-agent/tests/test_prompt_config_validation.py",
      "line_number": 156,
      "column": 4,
      "handler_type": "try-except",
      "exception_types": [
        "AssertionError",
        "Exception"
      ],
      "has_bare_except": false,
      "has_finally": false,
      "code_snippet": "try:\n        test_instance.test_directory_structure_exists()\n        print(\"✅ 目录结构验证通过\")\n        \n        test_instance.test_required_files_exist()\n        print(\"✅ 文件存在性验证通过\")\n        \n        test_instance.test_main_config_validation()\n        print(\"✅ 主配置文件schema验证通过\")\n        \n        test_instance.test_template_files_validation()\n        print(\"✅ 模板文件schema验证通过\")\n        \n        test_instance.test_locale_files_validation()\n        print(\"✅ 多语言文件schema验证通过\")\n        \n        test_instance.test_readme_content()\n        print(\"✅ README内容验证通过\")\n        \n        test_instance.test_system_prompt_content_extracted()\n        print(\"✅ 系统提示词内容验证通过\")\n        \n        print(\"\\n🎉 子任务14.1验收测试全部通过！\")\n        \n    except AssertionError as e:\n        print(f\"❌ 验证失败: {e}\")\n    except Exception as e:\n        print(f\"❌ 测试过程出错: {e}\")",
      "function_name": null,
      "class_name": null
    },
    {
      "file_path": "/Users/zhibinpan/workspace/meta-agent/tests/unit/test_mcp_watcher.py",
      "line_number": 174,
      "column": 8,
      "handler_type": "try-finally",
      "exception_types": [],
      "has_bare_except": false,
      "has_finally": true,
      "code_snippet": "try:\n            watcher = MCPConfigWatcher(config_path)\n            \n            # 第一次启动\n            result1 = watcher.start_watching()\n            assert result1\n            assert watcher.is_watching\n            \n            # 第二次启动（应该返回True但不重复启动）\n            result2 = watcher.start_watching()\n            assert result2\n            assert watcher.is_watching\n            \n            watcher.stop_watching()\n            \n        finally:\n            Path(config_path).unlink(missing_ok=True)",
      "function_name": "test_start_watching_already_watching",
      "class_name": "TestMCPConfigWatcher"
    },
    {
      "file_path": "/Users/zhibinpan/workspace/meta-agent/tests/unit/test_mcp_watcher.py",
      "line_number": 244,
      "column": 8,
      "handler_type": "try-finally",
      "exception_types": [],
      "has_bare_except": false,
      "has_finally": true,
      "code_snippet": "try:\n            watcher = MCPConfigWatcher(config_path)\n            callback = MagicMock()\n            watcher.add_callback(callback)\n            \n            info = watcher.get_config_info()\n            \n            assert info['config_path'] == str(Path(config_path).resolve())\n            assert info['is_watching'] == False\n            assert info['callbacks_count'] == 1\n            assert info['file_exists'] == True\n            assert info['file_size'] > 0\n            assert info['last_modified'] > 0\n            \n        finally:\n            Path(config_path).unlink(missing_ok=True)",
      "function_name": "test_get_config_info",
      "class_name": "TestMCPConfigWatcher"
    },
    {
      "file_path": "/Users/zhibinpan/workspace/meta-agent/tests/unit/test_mcp_watcher.py",
      "line_number": 267,
      "column": 8,
      "handler_type": "try-finally",
      "exception_types": [],
      "has_bare_except": false,
      "has_finally": true,
      "code_snippet": "try:\n            watcher = MCPConfigWatcher(config_path)\n            \n            with watcher:\n                assert watcher.is_watching\n            \n            assert not watcher.is_watching\n            \n        finally:\n            Path(config_path).unlink(missing_ok=True)",
      "function_name": "test_context_manager",
      "class_name": "TestMCPConfigWatcher"
    },
    {
      "file_path": "/Users/zhibinpan/workspace/meta-agent/tests/unit/test_mcp_watcher.py",
      "line_number": 316,
      "column": 8,
      "handler_type": "try-finally",
      "exception_types": [],
      "has_bare_except": false,
      "has_finally": true,
      "code_snippet": "try:\n            watcher = get_mcp_config_watcher(config_path)\n            watcher.start_watching()\n            \n            assert watcher.is_watching\n            \n            # 重置应该停止监控\n            reset_mcp_config_watcher()\n            \n            # 原监控器应该已停止\n            assert not watcher.is_watching\n            \n        finally:\n            Path(config_path).unlink(missing_ok=True)",
      "function_name": "test_reset_watching_watcher",
      "class_name": "TestGlobalWatcher"
    },
    {
      "file_path": "/Users/zhibinpan/workspace/meta-agent/tests/unit/test_mcp_watcher.py",
      "line_number": 350,
      "column": 8,
      "handler_type": "try-finally",
      "exception_types": [],
      "has_bare_except": false,
      "has_finally": true,
      "code_snippet": "try:\n            watcher = MCPConfigWatcher(config_path)\n            callback_results = []\n            \n            def test_callback(config):\n                callback_results.append(config)\n            \n            watcher.add_callback(test_callback)\n            \n            # 启动监控\n            assert watcher.start_watching()\n            \n            # 等待监控器启动\n            time.sleep(0.1)\n            \n            # 修改配置文件\n            modified_config = {\"version\": \"2.0\", \"servers\": {\"test\": {}}}\n            with open(config_path, 'w') as f:\n                json.dump(modified_config, f)\n            \n            # 等待文件系统事件处理\n            time.sleep(2.0)\n            \n            # 停止监控\n            watcher.stop_watching()\n            \n            # 验证回调被调用（可能需要更长时间）\n            # 注意：在某些系统上文件监控可能不会立即触发\n            # 这个测试主要验证监控器能正常启动和停止\n            \n        finally:\n            Path(config_path).unlink(missing_ok=True)",
      "function_name": "test_file_modification_detection",
      "class_name": "TestIntegration"
    },
    {
      "file_path": "/Users/zhibinpan/workspace/meta-agent/tests/unit/test_config.py",
      "line_number": 38,
      "column": 12,
      "handler_type": "try-finally",
      "exception_types": [],
      "has_bare_except": false,
      "has_finally": true,
      "code_snippet": "try:\n                config = Config(f.name)\n                \n                assert config.get('DEEPSEEK_API_KEY') == 'sk-test-123'\n                assert config.get('OPENROUTER_API_KEY') == 'sk-or-test-456'\n                assert config.get_bool('USE_DEEPSEEK_R1') is True\n                assert config.get_bool('DEBUG') is False\n                \n            finally:\n                os.unlink(f.name)",
      "function_name": "test_load_valid_env_file",
      "class_name": "TestConfig"
    },
    {
      "file_path": "/Users/zhibinpan/workspace/meta-agent/tests/unit/test_config.py",
      "line_number": 61,
      "column": 12,
      "handler_type": "try-finally",
      "exception_types": [],
      "has_bare_except": false,
      "has_finally": true,
      "code_snippet": "try:\n                config = Config(f.name)\n                \n                assert config.get('API_KEY_1') == 'sk-test-with-double-quotes'\n                assert config.get('API_KEY_2') == 'sk-test-with-single-quotes'\n                assert config.get('NORMAL_KEY') == 'sk-test-without-quotes'\n                \n            finally:\n                os.unlink(f.name)",
      "function_name": "test_load_env_with_quotes",
      "class_name": "TestConfig"
    },
    {
      "file_path": "/Users/zhibinpan/workspace/meta-agent/tests/unit/test_config.py",
      "line_number": 86,
      "column": 12,
      "handler_type": "try-finally",
      "exception_types": [],
      "has_bare_except": false,
      "has_finally": true,
      "code_snippet": "try:\n                config = Config(f.name)\n                \n                assert config.get('API_KEY') == 'sk-test-123'\n                assert config.get('ANOTHER_KEY') == 'value'\n                \n                # 确保只有这两个配置\n                all_config = config.list_all()\n                assert len(all_config) == 2\n                \n            finally:\n                os.unlink(f.name)",
      "function_name": "test_skip_comments_and_empty_lines",
      "class_name": "TestConfig"
    },
    {
      "file_path": "/Users/zhibinpan/workspace/meta-agent/tests/unit/test_config.py",
      "line_number": 114,
      "column": 12,
      "handler_type": "try-finally",
      "exception_types": [],
      "has_bare_except": false,
      "has_finally": true,
      "code_snippet": "try:\n                config = Config(f.name)\n                \n                # 测试存在的键\n                assert config.get('EXISTING_KEY') == 'existing_value'\n                \n                # 测试不存在的键\n                assert config.get('NONEXISTENT_KEY') is None\n                \n                # 测试带默认值的情况\n                assert config.get('NONEXISTENT_KEY', 'default') == 'default'\n                \n            finally:\n                os.unlink(f.name)",
      "function_name": "test_get_method",
      "class_name": "TestConfig"
    },
    {
      "file_path": "/Users/zhibinpan/workspace/meta-agent/tests/unit/test_config.py",
      "line_number": 137,
      "column": 12,
      "handler_type": "try-finally",
      "exception_types": [],
      "has_bare_except": false,
      "has_finally": true,
      "code_snippet": "try:\n                config = Config(f.name)\n                \n                # 测试存在的必需键\n                assert config.require('REQUIRED_KEY') == 'required_value'\n                \n                # 测试不存在的必需键\n                with pytest.raises(ConfigError) as exc_info:\n                    config.require('MISSING_REQUIRED_KEY')\n                \n                assert \"缺少必需的配置\" in str(exc_info.value)\n                \n            finally:\n                os.unlink(f.name)",
      "function_name": "test_require_method",
      "class_name": "TestConfig"
    },
    {
      "file_path": "/Users/zhibinpan/workspace/meta-agent/tests/unit/test_config.py",
      "line_number": 173,
      "column": 12,
      "handler_type": "try-finally",
      "exception_types": [],
      "has_bare_except": false,
      "has_finally": true,
      "code_snippet": "try:\n                config = Config(f.name)\n                \n                # 测试真值\n                assert config.get_bool('TRUE_1') is True\n                assert config.get_bool('TRUE_2') is True\n                assert config.get_bool('TRUE_3') is True\n                assert config.get_bool('TRUE_4') is True\n                assert config.get_bool('TRUE_5') is True\n                assert config.get_bool('TRUE_6') is True\n                \n                # 测试假值\n                assert config.get_bool('FALSE_1') is False\n                assert config.get_bool('FALSE_2') is False\n                assert config.get_bool('FALSE_3') is False\n                assert config.get_bool('FALSE_4') is False\n                assert config.get_bool('FALSE_5') is False\n                assert config.get_bool('EMPTY_VALUE') is False\n                \n                # 测试不存在的键\n                assert config.get_bool('NONEXISTENT') is False\n                assert config.get_bool('NONEXISTENT', True) is True\n                \n            finally:\n                os.unlink(f.name)",
      "function_name": "test_get_bool_method",
      "class_name": "TestConfig"
    },
    {
      "file_path": "/Users/zhibinpan/workspace/meta-agent/tests/unit/test_config.py",
      "line_number": 211,
      "column": 12,
      "handler_type": "try-finally",
      "exception_types": [],
      "has_bare_except": false,
      "has_finally": true,
      "code_snippet": "try:\n                config = Config(f.name)\n                \n                # 检查有效配置加载成功\n                assert config.get('VALID_KEY') == 'valid_value'\n                assert config.get('ANOTHER_KEY') == 'another_value'\n                \n                # 检查警告输出\n                captured = capsys.readouterr()\n                assert \"警告\" in captured.out\n                assert \"格式错误\" in captured.out\n                \n            finally:\n                os.unlink(f.name)",
      "function_name": "test_malformed_line_warning",
      "class_name": "TestConfig"
    },
    {
      "file_path": "/Users/zhibinpan/workspace/meta-agent/tests/unit/test_config.py",
      "line_number": 269,
      "column": 12,
      "handler_type": "try-finally",
      "exception_types": [],
      "has_bare_except": false,
      "has_finally": true,
      "code_snippet": "try:\n                config = Config(f.name)\n                \n                # 验证DeepSeek配置\n                assert config.require('DEEPSEEK_API_KEY') == 'sk-da85e6f63dc1462eb575e0d4357ab63e'\n                assert config.get_bool('USE_DEEPSEEK_R1') is True\n                assert config.get('OPENROUTER_API_KEY') == 'sk-or-v1-test'\n                \n            finally:\n                os.unlink(f.name)",
      "function_name": "test_deepseek_config_scenario",
      "class_name": "TestConfigIntegration"
    },
    {
      "file_path": "/Users/zhibinpan/workspace/meta-agent/tests/integration/test_mcp_integration.py",
      "line_number": 75,
      "column": 8,
      "handler_type": "try-finally",
      "exception_types": [],
      "has_bare_except": false,
      "has_finally": true,
      "code_snippet": "try:\n            # 重置配置加载器以触发重新加载\n            reset_mcp_config_loader()\n            \n            # 测试后备配置\n            mcp_servers = setup_mcp_servers()\n            \n            # 验证后备配置\n            assert isinstance(mcp_servers, dict)\n            assert len(mcp_servers) > 0\n            \n            # 验证包含基本服务器\n            expected_servers = ['time', 'fetch', 'memory']\n            for server in expected_servers:\n                assert server in mcp_servers\n            \n        finally:\n            # 恢复配置文件\n            if backup_file.exists():\n                backup_file.rename(config_file)",
      "function_name": "test_fallback_behavior_when_config_missing",
      "class_name": "TestMCPIntegration"
    },
    {
      "file_path": "/Users/zhibinpan/workspace/meta-agent/scripts/analyze_code.py",
      "line_number": 21,
      "column": 4,
      "handler_type": "try-except",
      "exception_types": [
        "Exception"
      ],
      "has_bare_except": false,
      "has_finally": false,
      "code_snippet": "try:\n        result = subprocess.run(cmd, capture_output=True, text=True)\n        print(f\"Vulture输出:\\n{result.stdout}\")\n        if result.stderr:\n            print(f\"Vulture错误:\\n{result.stderr}\")\n        return result.stdout\n    except Exception as e:\n        print(f\"运行vulture失败: {e}\")\n        return None",
      "function_name": "run_vulture",
      "class_name": null
    },
    {
      "file_path": "/Users/zhibinpan/workspace/meta-agent/scripts/analyze_code.py",
      "line_number": 37,
      "column": 4,
      "handler_type": "try-except",
      "exception_types": [
        "Exception"
      ],
      "has_bare_except": false,
      "has_finally": false,
      "code_snippet": "try:\n        result = subprocess.run(cmd, capture_output=True, text=True)\n        print(f\"Pyflakes输出:\\n{result.stdout}\")\n        if result.stderr:\n            print(f\"Pyflakes错误:\\n{result.stderr}\")\n        return result.stdout\n    except Exception as e:\n        print(f\"运行pyflakes失败: {e}\")\n        return None",
      "function_name": "run_pyflakes",
      "class_name": null
    },
    {
      "file_path": "/Users/zhibinpan/workspace/meta-agent/scripts/analyze_code.py",
      "line_number": 50,
      "column": 4,
      "handler_type": "try-except",
      "exception_types": [
        "Exception"
      ],
      "has_bare_except": false,
      "has_finally": false,
      "code_snippet": "try:\n        with open(file_path, 'r', encoding='utf-8') as f:\n            content = f.read()\n        \n        tree = ast.parse(content)\n        imports = {'import': [], 'from_import': []}\n        \n        for node in ast.walk(tree):\n            if isinstance(node, ast.Import):\n                for alias in node.names:\n                    imports['import'].append(alias.name)\n            elif isinstance(node, ast.ImportFrom):\n                if node.module:\n                    for alias in node.names:\n                        imports['from_import'].append(f\"{node.module}.{alias.name}\")\n        \n        return imports\n    except Exception as e:\n        print(f\"分析 {file_path} 导入失败: {e}\")\n        return {'import': [], 'from_import': []}",
      "function_name": "analyze_imports",
      "class_name": null
    },
    {
      "file_path": "/Users/zhibinpan/workspace/meta-agent/scripts/exception_audit.py",
      "line_number": 195,
      "column": 8,
      "handler_type": "try-except",
      "exception_types": [
        "(IndexError, TypeError)"
      ],
      "has_bare_except": false,
      "has_finally": false,
      "code_snippet": "try:\n            if start_line <= len(self.source_lines):\n                if end_line <= len(self.source_lines):\n                    lines = self.source_lines[start_line-1:end_line]\n                else:\n                    lines = self.source_lines[start_line-1:start_line]\n                return '\\n'.join(lines).strip()\n        except (IndexError, TypeError):\n            pass",
      "function_name": "_get_code_snippet",
      "class_name": "ExceptionAuditVisitor"
    },
    {
      "file_path": "/Users/zhibinpan/workspace/meta-agent/scripts/exception_audit.py",
      "line_number": 231,
      "column": 12,
      "handler_type": "try-except",
      "exception_types": [
        "Exception"
      ],
      "has_bare_except": false,
      "has_finally": false,
      "code_snippet": "try:\n                self._analyze_file(file_path)\n            except Exception as e:\n                print(f\"❌ 分析文件失败 {file_path}: {e}\")",
      "function_name": "_scan_directory",
      "class_name": "ExceptionAuditor"
    },
    {
      "file_path": "/Users/zhibinpan/workspace/meta-agent/scripts/exception_audit.py",
      "line_number": 251,
      "column": 8,
      "handler_type": "try-except",
      "exception_types": [
        "SyntaxError",
        "Exception"
      ],
      "has_bare_except": false,
      "has_finally": false,
      "code_snippet": "try:\n            with open(file_path, 'r', encoding='utf-8') as f:\n                source_code = f.read()\n                \n            # 解析AST\n            tree = ast.parse(source_code, filename=str(file_path))\n            \n            # 创建访问器并遍历AST\n            visitor = ExceptionAuditVisitor(str(file_path), source_code)\n            visitor.visit(tree)\n            \n            # 收集结果\n            self.all_handlers.extend(visitor.exception_handlers)\n            self.all_fallbacks.extend(visitor.fallback_patterns)\n            \n            if visitor.exception_handlers or visitor.fallback_patterns:\n                print(f\"📄 {file_path.relative_to(self.project_root)}: \"\n                      f\"{len(visitor.exception_handlers)} 异常处理, \"\n                      f\"{len(visitor.fallback_patterns)} fallback模式\")\n                      \n        except SyntaxError as e:\n            print(f\"⚠️ 语法错误 {file_path}: {e}\")\n        except Exception as e:\n            print(f\"❌ 处理文件失败 {file_path}: {e}\")",
      "function_name": "_analyze_file",
      "class_name": "ExceptionAuditor"
    }
  ],
  "fallback_patterns": [
    {
      "file_path": "/Users/zhibinpan/workspace/meta-agent/src/main.py",
      "line_number": 259,
      "column": 4,
      "pattern_type": "conditional-fallback",
      "code_snippet": "model_display = \"DeepSeek-R1推理模型\" if use_r1 else \"DeepSeek-V3稳定模型\"",
      "function_name": "main",
      "class_name": null
    },
    {
      "file_path": "/Users/zhibinpan/workspace/meta-agent/src/ui/helpers.py",
      "line_number": 69,
      "column": 4,
      "pattern_type": "conditional-fallback",
      "code_snippet": "model_info = \"DeepSeek-R1 推理模型\" if use_r1 else \"DeepSeek-V3 稳定模型\"",
      "function_name": "show_welcome",
      "class_name": null
    },
    {
      "file_path": "/Users/zhibinpan/workspace/meta-agent/src/config/prompt_manager.py",
      "line_number": 103,
      "column": 8,
      "pattern_type": "conditional-fallback",
      "code_snippet": "provided_vars = set(variables.keys()) if variables else set()",
      "function_name": "validate_variables",
      "class_name": "PromptManager"
    },
    {
      "file_path": "/Users/zhibinpan/workspace/meta-agent/src/config/mcp_validator.py",
      "line_number": 54,
      "column": 8,
      "pattern_type": "conditional-fallback",
      "code_snippet": "self.schema_path = Path(schema_path) if schema_path else None",
      "function_name": "__init__",
      "class_name": "MCPConfigValidator"
    }
  ],
  "statistics": {
    "handler_types": {
      "try-finally": 20,
      "try-except": 10
    },
    "exception_types": {
      "ValidationError": 3,
      "AssertionError": 1,
      "Exception": 6,
      "(IndexError, TypeError)": 1,
      "SyntaxError": 1
    },
    "fallback_types": {
      "conditional-fallback": 4
    },
    "bare_except_count": 0,
    "finally_block_count": 20
  }
}